package LinkedListPalindrome;


//Node for single linked List
class PNode{
		// you can have this as char or int
	int data;
	PNode next;
	
	PNode(int data){
		this.data=data;
		this.next=null;
	}
}

class PList{
	
	PNode head;
	
	PList(){
		this.head=null;
	}
	
	public void push(int data) {		
		PNode temp = new PNode(data);
		temp.next=head; 
		head=temp;
	}
	
	public void display() {
				
		 PNode temp = head;
		 while(temp!=null) {
			 System.out.print(temp.data);
			 temp=temp.next;
		 }
	}
	
	public void reverse() {
	 
		PNode  current= this.head;
		PNode  previousNode=null;
		PNode  nextNode =null;
		
		while(current!=null) {
			
			nextNode=current.next;
			current.next=previousNode;
			previousNode=current;
			current=nextNode;
		}
		this.head=previousNode;
	}
	
public void checkPalindrome() {
	
	PNode fast=head;
	PNode slow =head; 
	
	//find the middle of the list
	while(fast.next!=null &&fast.next.next!=null) {
		
		fast=fast.next.next;
		slow=slow.next;
	}
	
	PNode secondHead= slow.next;
	slow.next=null;
	
}
}
public class PalindromeLinkedList {


	public static void main(String[] args) {
		// TODO Auto-generated method stub
		PList l = new PList();
		l.push(1);
		l.push(2);
		l.push(3);
		l.display();
		l.reverse();
		l.display();
	}

}
